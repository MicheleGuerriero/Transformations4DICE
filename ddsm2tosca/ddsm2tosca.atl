-- @nsURI TOSCA=http://tosca4cloudify/1.0
-- @nsURI DDSM=http://ddsm/1.0
-- @atlcompiler emftvm


module ddsm2tosca;
create tosca : TOSCA from ddsm : DDSM;

rule DDSM2TOSCA{	
	from 
		s: DDSM!DDSM
	using{
		flexiantImports: Sequence(TOSCA!Import) = thisModule.getFlexiantImport();	
	}
	to 
		t: TOSCA!TopologyTemplate(
			tosca_definitions_version <- 'cloudify_dsl_1_1',
			
			description <- s.description,
					
			nodeTemplates <- s.cloudelement 
			-> select(element | element.oclIsKindOf(DDSM!VM))
			-> collect(element | thisModule.getNodeTemplatesFromVM(element))
			
		)
	do {
		for (p in DDSM!Provider.allInstances() ){
		
			if (p.isFlexiant()) {
				t.imports <- flexiantImports;
			}
		}
		
		
	}
}

helper context DDSM!Provider def: isFlexiant(): Boolean =
	if self.type = #Flexiant then
		true
	else
		false
	endif
;

rule getFlexiantImport(){
	using {
	
		
	}
	to 
		i1: TOSCA!Import(
			file <- 'insert here statically the list of DICE tosca imports'
		),
		i2: TOSCA!Import(
			file <- 'insert here statically the list of DICE tosca imports'
		),
		i3: TOSCA!Import(
			file <- 'insert here statically the list of DICE tosca imports'
		),
		i4: TOSCA!Import(
			file <- 'insert here statically the list of DICE tosca imports'
		),
		i5: TOSCA!Import(
			file <- 'insert here statically the list of DICE tosca imports'
		)
	do {
		Sequence{i1,i2,i3,i4,i5};	
	}
}

lazy rule getNodeTemplatesFromVM{
	from 
		s : DDSM!VM
	to
		t : TOSCA!NodeTemplate(
			node_template_name <- s.elementId,
            type <- s.getVMGenericSize, 
			
			properties <- s.property 
			-> collect(property | thisModule.getProperty(property)),
			
			interfaces <- s.resource 
			-> collect(resource | thisModule.getInterfaceFromResource(resource))
		)
}

helper context DDSM!VM def: getVMGenericSize: String =
	if not self.genericSize.oclIsUndefined() then
		self.genericSize.toString()
	else
		'dice.hosts.GenericHost'
	endif;

lazy rule getInterfaceFromResource{
	from
		s: DDSM!Resource
	to
		t: TOSCA!Interface(
			interface_name <- s.resourceId,	
			type <- s.resourceId + '_Type',
			operations <- s.scripts -> collect(script | thisModule.getOperationFromScript(script))
		)
}

lazy rule getOperationFromScript{
	from 
		s: DDSM!Script
	to
		t: TOSCA!Operation(
			operation_name <- s.scriptId,
			primary <- s.scriptUri
		)
}	
	
lazy rule getProperty{
	from 
		s : DDSM!Property
	to
		t : TOSCA!Property(
			property_name <- s.propertyId,
			value <- s.value
		)
}

