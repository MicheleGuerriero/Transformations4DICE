/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.services.ToscaDslGrammarAccess;
import tosca.Attribute;
import tosca.Capability;
import tosca.Group;
import tosca.Import;
import tosca.Interface;
import tosca.NodeTemplate;
import tosca.Operation;
import tosca.Policy;
import tosca.Property;
import tosca.Relationship;
import tosca.Requirement;
import tosca.TopologyTemplate;
import tosca.ToscaPackage;

@SuppressWarnings("all")
public class ToscaDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ToscaDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ToscaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ToscaPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case ToscaPackage.CAPABILITY:
				sequence_Capability(context, (Capability) semanticObject); 
				return; 
			case ToscaPackage.GROUP:
				sequence_Group(context, (Group) semanticObject); 
				return; 
			case ToscaPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case ToscaPackage.INTERFACE:
				sequence_Interface(context, (Interface) semanticObject); 
				return; 
			case ToscaPackage.NODE_TEMPLATE:
				sequence_NodeTemplate(context, (NodeTemplate) semanticObject); 
				return; 
			case ToscaPackage.OPERATION:
				sequence_Operation(context, (Operation) semanticObject); 
				return; 
			case ToscaPackage.PARAMETER:
				sequence_Parameter(context, (tosca.Parameter) semanticObject); 
				return; 
			case ToscaPackage.POLICY:
				sequence_Policy(context, (Policy) semanticObject); 
				return; 
			case ToscaPackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			case ToscaPackage.RELATIONSHIP:
				sequence_Relationship(context, (Relationship) semanticObject); 
				return; 
			case ToscaPackage.REQUIREMENT:
				sequence_Requirement(context, (Requirement) semanticObject); 
				return; 
			case ToscaPackage.TOPOLOGY_TEMPLATE:
				sequence_TopologyTemplate(context, (TopologyTemplate) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     attribute_name=STRING
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ToscaPackage.Literals.ATTRIBUTE__ATTRIBUTE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToscaPackage.Literals.ATTRIBUTE__ATTRIBUTE_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getAttribute_nameSTRINGTerminalRuleCall_1_0(), semanticObject.getAttribute_name());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Capability returns Capability
	 *
	 * Constraint:
	 *     (
	 *         capability_name=STRING 
	 *         type=STRING 
	 *         description=STRING? 
	 *         (properties+=Property properties+=Property*)? 
	 *         (attributes+=Attribute attributes+=Attribute*)?
	 *     )
	 */
	protected void sequence_Capability(ISerializationContext context, Capability semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Group returns Group
	 *
	 * Constraint:
	 *     (
	 *         group_name=STRING 
	 *         type=STRING 
	 *         description=STRING? 
	 *         (targets+=EString targets+=STRING*)? 
	 *         properties=Property? 
	 *         (interfaces+=Interface interfaces+=Interface*)?
	 *     )
	 */
	protected void sequence_Group(ISerializationContext context, Group semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     file=STRING?
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Interface returns Interface
	 *
	 * Constraint:
	 *     (interface_name=STRING type=STRING (operations+=Operation operations+=Operation*)? (inputs+=Property inputs+=Property*)?)
	 */
	protected void sequence_Interface(ISerializationContext context, Interface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NodeTemplate returns NodeTemplate
	 *
	 * Constraint:
	 *     (
	 *         node_template_name=STRING 
	 *         type=STRING 
	 *         description=STRING? 
	 *         (relationships+=Relationship relationships+=Relationship*)? 
	 *         (interfaces+=Interface interfaces+=Interface*)? 
	 *         (properties+=Property properties+=Property*)? 
	 *         (attributes+=Attribute attributes+=Attribute*)? 
	 *         (requirements+=Requirement requirements+=Requirement*)? 
	 *         (capabilities+=Capability capabilities+=Capability*)?
	 *     )
	 */
	protected void sequence_NodeTemplate(ISerializationContext context, NodeTemplate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns Operation
	 *
	 * Constraint:
	 *     (
	 *         operation_name=STRING 
	 *         primary=STRING 
	 *         description=STRING? 
	 *         (dependentArtifacts+=EString dependentArtifacts+=EString*)? 
	 *         (inputs+=Property inputs+=Property*)?
	 *     )
	 */
	protected void sequence_Operation(ISerializationContext context, Operation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     parameter_name=STRING
	 */
	protected void sequence_Parameter(ISerializationContext context, tosca.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ToscaPackage.Literals.PARAMETER__PARAMETER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToscaPackage.Literals.PARAMETER__PARAMETER_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getParameter_nameSTRINGTerminalRuleCall_1_0(), semanticObject.getParameter_name());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Policy returns Policy
	 *
	 * Constraint:
	 *     policy_name=STRING
	 */
	protected void sequence_Policy(ISerializationContext context, Policy semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ToscaPackage.Literals.POLICY__POLICY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToscaPackage.Literals.POLICY__POLICY_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPolicyAccess().getPolicy_nameSTRINGTerminalRuleCall_1_0(), semanticObject.getPolicy_name());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Property returns Property
	 *
	 * Constraint:
	 *     (property_name=STRING value=STRING)
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ToscaPackage.Literals.PROPERTY__PROPERTY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToscaPackage.Literals.PROPERTY__PROPERTY_NAME));
			if (transientValues.isValueTransient(semanticObject, ToscaPackage.Literals.PROPERTY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ToscaPackage.Literals.PROPERTY__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyAccess().getProperty_nameSTRINGTerminalRuleCall_1_0(), semanticObject.getProperty_name());
		feeder.accept(grammarAccess.getPropertyAccess().getValueSTRINGTerminalRuleCall_5_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relationship returns Relationship
	 *
	 * Constraint:
	 *     (
	 *         relationship_name=STRING 
	 *         type=STRING 
	 *         target=STRING? 
	 *         (interfaces+=Interface interfaces+=Interface*)? 
	 *         (properties+=Property properties+=Property*)? 
	 *         (attributes+=Attribute attributes+=Attribute*)? 
	 *         (sourceInterfaces+=Interface sourceInterfaces+=Interface*)? 
	 *         (targetInterfaces+=Interface targetInterfaces+=Interface*)?
	 *     )
	 */
	protected void sequence_Relationship(ISerializationContext context, Relationship semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Requirement returns Requirement
	 *
	 * Constraint:
	 *     (requirement_name=STRING capabiity=STRING node=STRING?)
	 */
	protected void sequence_Requirement(ISerializationContext context, Requirement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TopologyTemplate returns TopologyTemplate
	 *
	 * Constraint:
	 *     (
	 *         tosca_definitions_version=STRING 
	 *         description=STRING? 
	 *         (imports+=Import imports+=Import*)? 
	 *         (outputs+=Parameter outputs+=Parameter*)? 
	 *         (inputs+=Parameter inputs+=Parameter*)? 
	 *         (nodeTemplates+=NodeTemplate nodeTemplates+=NodeTemplate*)? 
	 *         (realtionships+=Relationship realtionships+=Relationship*)? 
	 *         (groups+=Group groups+=Group*)? 
	 *         (policies+=Policy policies+=Policy*)?
	 *     )
	 */
	protected void sequence_TopologyTemplate(ISerializationContext context, TopologyTemplate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
