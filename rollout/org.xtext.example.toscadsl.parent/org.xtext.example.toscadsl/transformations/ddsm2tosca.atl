-- @nsURI TOSCA=http://tosca4cloudify/1.0
-- @nsURI DDSM=http://ddsm/1.0
-- @atlcompiler emftvm

module ddsm2tosca;
create tosca : TOSCA from ddsm : DDSM;

rule DDSM2TOSCA{	
	from 
		s: DDSM!DDSM
	using{
		flexiantImports: Sequence(TOSCA!Import) = thisModule.getFlexiantImport();
		additionalNodes: Sequence(TOSCA!NodeTemplate) = s.cloudelement
			-> select(element | element.oclIsTypeOf(DDSM!InternalComponent))
			-> select(comp | comp.publicPorts.size() > 0)
			-> collect(frontend | thisModule.getFloatingIpNodeFromFrontend(frontend.elementId, frontend.openedPort)).flatten();
	}
	to 
		t: TOSCA!TopologyTemplate(
			tosca_definitions_version <- 'cloudify_dsl_1_1',
			
			description <- s.description,
					
			nodeTemplates <- s.cloudelement 
			-> select(element | element.oclIsKindOf(DDSM!VM))
			-> collect(element | thisModule.getNodeTemplatesFromVM(element)).
			union(s.cloudelement 
			-> select(element | element.oclIsKindOf(DDSM!InternalComponent))
			-> collect(element | thisModule.getNodeTemplatesFromInternalComponent(element))).
			union(additionalNodes)
		)
	do {
		for (p in DDSM!Provider.allInstances() ){
		
			if (p.isFlexiant()) {
				t.imports <- flexiantImports;
			}
		}	
				
	}
}

rule getFloatingIpNodeFromFrontend (elementId: String, publicPorts: Sequence(Integer)) {
	using {
		securityProperties: Sequence(TOSCA!Property) = publicPorts ->
		collect(port | thisModule.getPropertyFromAttribute('port', port)).flatten();
	}
	to
		t: TOSCA!NodeTemplate(
			node_template_name <- elementId + '_floating_ip',
			type <- 'cloudify.openstack.nodes.FloatingIP' -- this should probably be provider dependent
		),
		u: TOSCA!NodeTemplate(
			node_template_name <- elementId + '_security_group',
			type <- 'cloudify.openstack.nodes.SecurityGroup', -- this should probably be provider dependent
			properties <- securityProperties
		)
	do {
		Sequence{t,u};
	}
		
}

lazy rule getNodeTemplatesFromInternalComponent{
	from 
		s : DDSM!InternalComponent
	to
		t : TOSCA!NodeTemplate(
			node_template_name <- s.elementId,	
			type <- 'dice.' + s.oclType().refGetValue('name').toString(), 
			
			relationships <- s.requiredexecutionplatform -> collect( platform | 
				thisModule.getContainedInRelationshipFromExecutionBinding(DDSM!ExecutionBinding.allInstances() ->  any(binding | 
					
			binding.requiredexecutionplatform.elementId = platform.elementId
			))).union(
				s.requiredport -> collect( port | 
				thisModule.getConnectedToRelationshipFromRelationship(DDSM!Relationship.allInstances() ->  any(relationship | 
				relationship.requiredport.elementId = port.elementId
			)))),
			
			properties <- s.property 
			-> collect(property | thisModule.getProperty(property)),
			
			interfaces <- 
			s.resource 
			-> select(resource | resource.oclIsTypeOf(DDSM!Resource))
			-> collect(resource | thisModule.getInterfaceFromResource(resource)).union(
			s.resource 
			-> select(resource | resource.oclIsTypeOf(DDSM!ChefResource))
			-> collect(chef_resource | thisModule.getInterfaceFromChefResource(chef_resource))
			)	
		)
		
}

lazy rule getContainedInRelationshipFromExecutionBinding{
	from
		s:  DDSM!ExecutionBinding
	to
		t: TOSCA!Relationship(
			relationship_name <- s.elementId,
			target <- s.providedexecutionplatform.owner.elementId,
			type <- 'cloudify.relationships.contained_in',
			sourceInterfaces <- s.requiredexecutionplatform.resource 
			-> collect(resource | thisModule.getInterfaceFromResource(resource)),
			targetInterfaces <- s.providedexecutionplatform.resource 
			-> collect(resource | thisModule.getInterfaceFromResource(resource)),
			properties <- s.property 
			-> collect(property | thisModule.getProperty(property))
		)
}

lazy rule getConnectedToRelationshipFromRelationship{
	from
		s:  DDSM!Relationship
	to
		t: TOSCA!Relationship(
			relationship_name <- s.elementId,
			target <- s.providedport.owner.elementId,
			type <- 'cloudify.relationships.connected_to',
			sourceInterfaces <- s.requiredport.resource 
			-> collect(resource | thisModule.getInterfaceFromResource(resource)),
			targetInterfaces <- s.providedport.resource 
			-> collect(resource | thisModule.getInterfaceFromResource(resource)),
			properties <- s.property 
			-> collect(property | thisModule.getProperty(property))
		)
		
}

helper context DDSM!Provider def: isFlexiant(): Boolean =
	if self.type = #Flexiant then
		true
	else
		false
	endif
;

rule getFlexiantImport(){
	using {
		FCO_CLIENT_PLUGIN_VERSION: String = '';
		PLATFORM: String = '';
		FCO_CLIENT_VERSION: String = '';
	}
	to 
		i1: TOSCA!Import(
			file <- 'http://www.getcloudify.org/spec/cloudify/3.3.1/types.yaml'
		),
		i2: TOSCA!Import(
			file <- 'https://raw.githubusercontent.com/dice-project/DICE-FCO-Plugin-Cloudify/' + FCO_CLIENT_PLUGIN_VERSION + '/plugin.yaml'
		),
		i3: TOSCA!Import(
			file <- 'http://www.getcloudify.org/spec/chef-plugin/1.3.1/plugin.yaml'
		),
		i4: TOSCA!Import(
			file <- 'http://dice-project.github.io/DICE-Deployment-Cloudify/spec/' + PLATFORM + '/' + FCO_CLIENT_VERSION + '/plugin.yaml'
		),
		i5: TOSCA!Import(
			file <- 'types/dice.yaml'
		)
	do {
		Sequence{i1,i2,i3,i4,i5};	
	}
}

rule getOpenstackImport(){
	using {
		OPENSTACK_VERSION: String = '';
	}
	to 
		i1: TOSCA!Import(
			file <- 'openstack-example-import-1' + OPENSTACK_VERSION
		),
		i2: TOSCA!Import(
			file <- 'openstack-example-import-2' + OPENSTACK_VERSION
		)
	do {
		Sequence{i1,i2};	
	}
}

lazy rule getNodeTemplatesFromVM{
	from 
		s : DDSM!VM
	using {
		instances_property_name: String = 'instances';	
		instances_property: Sequence(TOSCA!Property) = thisModule.getPropertyFromAttribute(instances_property_name, s.instances);
	}
	to
		t : TOSCA!NodeTemplate(
			node_template_name <- s.elementId,
            type <- s.getVMGenericSize, 
			
			properties <- s.property 
			-> collect(property | thisModule.getProperty(property)) -> union(instances_property),	
			
			interfaces <- 
			s.resource 
			-> select(resource | resource.oclIsTypeOf(DDSM!Resource))
			-> collect(resource | thisModule.getInterfaceFromResource(resource)).union(
			s.resource 
			-> select(resource | resource.oclIsTypeOf(DDSM!ChefResource))
			-> collect(chef_resource | thisModule.getInterfaceFromChefResource(chef_resource))
			)
		)
}

helper context DDSM!VM def: getVMGenericSize: String =
	if not self.genericSize.oclIsUndefined() then
		'dice.hosts.' + self.genericSize.toString().replaceAll('#', '')
	else
		'dice.hosts.GenericHost'
	endif;

lazy rule getInterfaceFromResource{
	from
		s: DDSM!Resource
	using {
		download: TOSCA!Operation = thisModule.getOperationFromScript('download', s.downloadCommand);
		preconfigure: TOSCA!Operation = thisModule.getOperationFromScript('preconfigure', s.preconfigureCommand);
		install: TOSCA!Operation = thisModule.getOperationFromScript('install', s.installCommand);
		start: TOSCA!Operation = thisModule.getOperationFromScript('start', s.startCommand);
		stop: TOSCA!Operation = thisModule.getOperationFromScript('stop', s.stopCommand);
		ccreate: TOSCA!Operation = thisModule.getOperationFromScript('create', s.createCommand);

	}
	to
		t: TOSCA!Interface(
			interface_name <- s.resourceId,	
			type <- 'cloudify.interfaces.lifecycle'
		)
	do{
		t.operations <- Sequence{download, preconfigure, install, start, stop, ccreate};
	}
}

lazy rule getInterfaceFromChefResource {
	from
		s: DDSM!ChefResource
	to
		t: TOSCA!Interface(
			interface_name <- s.resourceId,	
			type <- 'dice.interfaces.chef_resource',
			operations <- thisModule.getOperationFromScript('chef_cookbook' , s.cookbookId)
		)
}

rule getOperationFromScript(operationId: String, command: String){
	to
		t: TOSCA!Operation(
			operation_name <- operationId,
			primary <- command
		)
}	
	
lazy rule getProperty{
	from 
		s : DDSM!Property
	to
		t : TOSCA!Property(
			property_name <- s.propertyId,
			value <- s.value
		)
}

rule getPropertyFromAttribute(name: String, value: Integer){
	to
		t : TOSCA!Property(
			property_name <- name,
			value <- value.toString()
		)
	do {
		Sequence{t};
	}
}
