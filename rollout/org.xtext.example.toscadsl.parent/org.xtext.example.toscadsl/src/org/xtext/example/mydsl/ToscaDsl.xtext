// automatically generated by Xtext
grammar org.xtext.example.mydsl.ToscaDsl with org.eclipse.xtext.common.Terminals

import "http://tosca/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

TopologyTemplate returns TopologyTemplate:
	'{'
		'"tosca_definitions_version" :' tosca_definitions_version=STRING 
		(',\n"description" :' description=STRING )? 
		(',\n"imports" :' '[' imports+=Import ( "," imports+=Import)* ']' )? 
		(',\n"outputs" :' '{' outputs+=Parameter ( "," outputs+=Parameter)* '}' )? 
		(',\n"inputs" :' '{' inputs+=Parameter ( "," inputs+=Parameter)* '}' )? 
		(',\n"nodeTemplates" :' '{' nodeTemplates+=NodeTemplate ( "," nodeTemplates+=NodeTemplate)* '}' )? 
		(',\n"realtionships" :' '{' realtionships+=Relationship ( "," realtionships+=Relationship)* '}' )? 
		(',\n"groups" :' '{' groups+=Group ( "," groups+=Group)* '}')? 
		(',\n"policies" :' '{' policies+=Policy ( "," policies+=Policy)* '}')? 
	'}';

EString returns ecore::EString:
	STRING | ID;

Import returns Import:
	{Import}	
		(file=STRING)?
;
	//'{'
		//'"file" :' file=EString 
		//(',\n"import_name" :' import_name=STRING )?
		//(',\n"repository" :' repository=STRING )?
		//(',\n"namespace_uri" :' namespace_uri=STRING )?
		//(',\n"namespace_prefix" :' namespace_prefix=STRING )?
	//'}';

Parameter returns Parameter:
	{Parameter}
	parameter_name=STRING;

NodeTemplate returns NodeTemplate:
	{NodeTemplate }
	node_template_name=STRING ":"
	'{'
		'"type" :' type=STRING 
		(',\n"description" :' description=STRING )?
		(',\n"relationships" :' '['relationships+=Relationship ( ","  relationships+=Relationship )* ']' )?
		(',\n"interfaces" :' '{' interfaces+=Interface ( "," interfaces+=Interface)* '}' )?
		(',\n"properties" :' '[' properties+=Property ( "," properties+=Property)* ']' )?
		(',\n"attributes" :' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
		(',\n"requirements" :' '{' requirements+=Requirement ( "," requirements+=Requirement)* '}' )?
		(',\n"capabilities" :' '{' capabilities+=Capability ( "," capabilities+=Capability)* '}' )?
	'}';

Relationship returns Relationship:
	{Relationship}
	//relationship_name=STRING ":"
	'{'
		//'"relationship_name" :' relationship_name=STRING
		'"type" :' type=STRING
		(',\n"target" :' target=STRING )?
		(',\n"interfaces" :' '{' interfaces+=Interface ( "," interfaces+=Interface)* '}' )?
		(',\n"properties" :' '[' properties+=Property ( "," properties+=Property)* ']' )?
		(',\n"attributes" :' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
		(',\n"source_interfaces" :' '{' source_interfaces+=Interface ( "," source_interfaces+=Interface)* '}' )?
		(',\n"target_iterfaces" :' '{' target_interfaces+=Interface ( "," target_interfaces+=Interface)* '}' )?
	'}';

Group returns Group:
	{Group}
	group_name=STRING ":"
	'{'
		'"type" :' type=STRING 
		(',\n"description" :' description=STRING )?
		(',\n"targets" :' '{' targets+=EString ( "," targets+=STRING)* '}' )?
		(',\n"properties" :' properties=Property )?
		(',\n"interfaces" :' '{' interfaces+=Interface ( "," interfaces+=Interface)* '}' )?
	'}';

Policy returns Policy:
	{Policy}
	policy_name=STRING ":";

Interface returns Interface:
	{Interface}
	//interface_name=STRING ":"
	type=STRING ":"
	'{'
		//'"type" :' type=STRING 
		//(',\n"operations" :' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		('\n"operations" :' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		//(',\n"inputs" :' '{' inputs+=Property ( "," inputs+=Property)* '}' )?
	'}';

Property returns Property:
	{Property}
	'{'
	property_name=STRING ":"
	value=STRING
	'}'
	;

Attribute returns Attribute:
	{Attribute}
	attribute_name=STRING ":";

Requirement returns Requirement:
	requirement_name=STRING ":"
	'{'
		'"capabiity" :' capabiity=STRING
		(',\n"node" :' node=STRING )?
	'}';

Capability returns Capability:
	capability_name=STRING ":"
	'{'
		'"type" :' type=STRING 
		(',\n"description" :' description=STRING )?
		(',\n"properties" :' '{' properties+=Property ( "," properties+=Property)* '}' )?
		(',\n"attributes" :' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

Operation returns Operation:
	{Operation}
		operation_name=STRING ":"
		primary=STRING
	//'{'
		//'"primary" :' primary=STRING
		//(',\n"description" :' description=STRING )?
		//(',\n"dependentArtifacts" :' '{' dependentArtifacts+=EString ( "," dependentArtifacts+=EString)* '}' )?
		//(',\n"inputs" :' '{' inputs+=Property ( "," inputs+=Property)* '}' )?
	//'}'
	;
