package org.xtext.example.mydsl;

import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Map;

import tosca.*;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.xtext.example.mydsl.ToscaDslStandaloneSetup;
import org.yaml.snakeyaml.Yaml;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.inject.Injector;

public class Xmi2jsonGrammarRunner {
    
    public final static String IN_METAMODEL = "./metamodels/ddsm.ecore";
    public final static String IN_METAMODEL_NAME = "DDSM";
    public final static String OUT_METAMODEL = "./metamodels/tosca.ecore";
    public final static String OUT_METAMODEL_NAME = "TOSCA";

    public final static String IN_MODEL = "./models/sample_ddsm.xmi";
    public final static String OUT_MODEL = "./models/sample_tosca.xmi";

    public final static String TRANSFORMATION_DIR = "./transformations/";
    public final static String TRANSFORMATION_MODULE = "ddsm2tosca";

    public static void main(String[] args) throws IOException {
        // you have to specify the input filename and output filename in program
        // parameters (without file extensions), i.e. HMR_DDSM_TOSCA
        // MHRDDSM2TOSCA
        // first Argument is the xmi file that is generated by ATL
        // transformation from XX-DDSM to TOSCA-DDSM.xmi
        // Second Argument is the name of the output file that generates the
        // YAML as output
        runme("models/sample_tosca", "models/sample_tosca");
    }

    @SuppressWarnings("unchecked")
    public static void runme(String toscaJsonModelPath, String toscaYamlModelPath) {

        ATLTransformationLauncher l = new ATLTransformationLauncher();
        l.registerInputMetamodel(IN_METAMODEL);
        l.registerOutputMetamodel(OUT_METAMODEL);
        l.launch(IN_MODEL, IN_METAMODEL_NAME, OUT_MODEL, OUT_METAMODEL_NAME, TRANSFORMATION_DIR, TRANSFORMATION_MODULE);
        
        // Register Epackage of modeling project otherwise, you will see: make
        // sure that Epackage is registered
        // EPackage.Registry.INSTANCE.put("http://www.w3.org/XML/1998/namespace",NamespacePackage.eINSTANCE);
        EPackage.Registry.INSTANCE.put("http://tosca/1.0", ToscaPackage.eINSTANCE);

        Injector injector = new ToscaDslStandaloneSetup().createInjectorAndDoEMFRegistration();
        // my dsl standalone is made by running Xtext artifact
        ResourceSet xmiResourceSet = injector.getInstance(ResourceSet.class);

        Resource xmi_resource = (Resource) xmiResourceSet.getResource(URI.createURI(toscaJsonModelPath + ".xmi"), true);

        // destination model that will be made by grammar
        ResourceSet xtext_resourceSet = injector.getInstance(ResourceSet.class);
        Resource textualModel_resource = (Resource) xtext_resourceSet
                .createResource(URI.createURI(toscaJsonModelPath + ".tosca"));
        // add the contents of the source model into destination model
        textualModel_resource.getContents().add(xmi_resource.getContents().get(0));

        // save the destination file
        try {
            textualModel_resource.save(null);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        // this part calls the python file Json2YAMLConverter.py to convert json
        // to its yaml representation
        try {

            String actualObj =readFile(toscaJsonModelPath + ".tosca", Charset.defaultCharset());
            ObjectMapper mapper = new ObjectMapper();
            JsonNode node = mapper.readTree(actualObj);
            Yaml yaml = new Yaml();
            Map<String,Object> map = (Map<String, Object>) yaml.load(node.toString());
            // convert to yaml string (yaml formatted string)
            try(  PrintWriter out = new PrintWriter( toscaYamlModelPath + ".yaml" )  ){
                out.println( yaml.dump(map) );
            }
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

    static String readFile(String path, Charset encoding) throws IOException {
        byte[] encoded = Files.readAllBytes(Paths.get(path));
        return new String(encoded, encoding);
    }
}
